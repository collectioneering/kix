using System.Text.Json;
using System.Text.Json.Serialization;
using Art;
using Art.EF.Sqlite;
using CommandLine;

namespace Kix;

[Verb("db-list", HelpText = "List archives in database.")]
internal class RunDbList : RunDbBase, IRunnable
{
    [Option("augment", HelpText = "Use base profile file for profile generated by --output.", MetaValue = "file")]
    public string? Augment { get; set; }

    [Option('o', "output", HelpText = "Generate profile file.", MetaValue = "file")]
    public string? Output { get; set; }

    public async Task<int> RunAsync()
    {
        List<ArtifactKey>? selection = Output != null ? new List<ArtifactKey>() : null;
        using SqliteArtifactRegistrationManager arm = new(Database);
        IEnumerable<ArtifactInfo> en = (await arm.ListArtifactsOptionalsAsync(Tool, Group)).WithFilters(Tool, ToolLike, Group, GroupLike, Id, IdLike, NameLike);
        foreach (ArtifactInfo i in en)
        {
            await Common.DisplayAsync(i, ListResource, arm, Detailed);
            selection?.Add(i.Key);
        }
        if (Output != null && selection != null)
        {
            Dictionary<(string Tool, string Group), List<string>> dict = selection.GroupBy(x => (x.Tool, x.Group)).ToDictionary(x => x.Key, x => x.Select(v => v.Id).ToList());
            List<ArtifactToolProfile> profiles = new();
            if (Augment != null)
            {
                await using FileStream afs = File.OpenRead(Augment);
                var augmentProfiles = ArtifactToolProfile.DeserializeProfiles(afs, JsonOpt.Options);
                Dictionary<(string Tool, string Group), ArtifactToolProfile> adict = augmentProfiles.ToDictionary(x => (x.Tool, x.Group), x => x);
                foreach (((string? tool, string? group), List<string> value) in dict)
                    adict[(tool, group)] = adict.TryGetValue((tool, group), out ArtifactToolProfile? aprofile)
                        ? AugmentProfile(aprofile, value)
                        : CreateNewProfile(tool, group, value);
                profiles.AddRange(adict.Values);
            }
            else
            {
                foreach (((string? tool, string? group), List<string> value) in dict) profiles.Add(CreateNewProfile(tool, @group, value));
            }
            await using FileStream fs = File.Create(Output);
            await JsonSerializer.SerializeAsync(fs, profiles, s_jsonOptions);
        }
        return 0;
    }

    private static ArtifactToolProfile AugmentProfile(ArtifactToolProfile profile, List<string> ids)
        => CreateNewProfile(profile.Tool, profile.Group, profile.Options != null ? new Dictionary<string, JsonElement>(profile.Options) : new Dictionary<string, JsonElement>(), ids);

    private static ArtifactToolProfile CreateNewProfile(string tool, string group, List<string> ids)
        => CreateNewProfile(tool, group, new Dictionary<string, JsonElement>(), ids);

    private static ArtifactToolProfile CreateNewProfile(string tool, string group, Dictionary<string, JsonElement> dict, List<string> ids)
    {
        dict["artifactList"] = JsonSerializer.SerializeToElement(ids);
        return new ArtifactToolProfile(tool, group, dict);
    }

    private static readonly JsonSerializerOptions s_jsonOptions = new() { PropertyNameCaseInsensitive = true };

    static RunDbList() => s_jsonOptions.Converters.Add(new JsonStringEnumConverter());
}
